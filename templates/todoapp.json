{
	"Description": "My Cloud Academy Labs 2-Tier Scalable API Template",
    "Parameters":
    {
        "VPCAZ":
        {
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Description": "The Availaibilty zone to use for VPC",
            "AllowedPattern": "^(?!us-west-2d).*$",
            "ConstraintDescription": "Availability zone value must not match us-west-2d"
        },
        "NumberOfNodes":
        {
            "Type": "Number",
            "Description": "The number of EC2 nodes the service should have.",
            "Default": 2
        },
        "NodeSize":
        {
            "Type": "String",
            "Description": "The type of node to use for your system",
            "Default": "t2.micro"
        },
        "RunNumber": {
            "Type": "Number",
            "Description": "Used to force the ASG's nodes' UserData to update.",
            "Default": 1
        },
        "TableThrougput":
        {
            "Type": "Number",
            "Description": "The number of queries per second the table should support.",
            "Default": 4
        },
        "VPCClassBOctet": {
            "Type": "Number",
            "Description": "The Class B block to use for the VPC (0-255).",
            "MaxValue": 255,
            "MinValue": 0,
            "Default": 0
          }  
    },
    "Mappings": {
        "AWSNATAMIs": {
          "us-east-1": { "AMI": "ami-303b1458" },
          "us-west-2": { "AMI": "ami-69ae8259" },
          "us-west-1": { "AMI": "ami-7da94839" },
          "eu-west-1": { "AMI": "ami-6975eb1e" },
          "eu-central-1": { "AMI": "ami-46073a5b" },
          "ap-southeast-1": { "AMI": "ami-b49dace6" },
          "ap-northeast-1": { "AMI": "ami-03cf3903" },
          "ap-southeast-2": { "AMI": "ami-e7ee9edd" },
          "sa-east-1": { "AMI": "ami-fbfa41e6" }
        },
        "AWSLinuxAMIs": {
          "us-east-1": { "AMI": "ami-1ecae776" },
          "us-west-2": { "AMI": "ami-e7527ed7" },
          "us-west-1": { "AMI": "ami-d114f295" },
          "eu-west-1": { "AMI": "ami-a10897d6" },
          "eu-central-1": { "AMI": "ami-a8221fb5" },
          "ap-northeast-1": { "AMI": "ami-cbf90ecb" },
          "ap-southeast-1": { "AMI": "ami-68d8e93a" },
          "ap-southeast-2": { "AMI": "ami-fd9cecc7" },
          "sa-east-1": { "AMI": "ami-b52890a8" }
        }
      },
    "Resources":
    {
        "VPC":
        {
            "Type": "AWS::EC2::VPC",
            "Properties": 
             {
                 "CidrBlock": { "Fn::Join": [ "", [ "10.", { "Ref": "VPCClassBOctet" }, ".0.0/16" ] ] },
                 "EnableDnsSupport": true,
                 "EnableDnsHostnames": false,
                 "InstanceTenancy": "default",
                 "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
             }

        },
        "PublicSubnet":
        {
            "Type": "AWS::EC2::Subnet",
            "Properties":
            {
                "AvailabilityZone": {"Ref" : "VPCAZ" },
                "CidrBlock": { "Fn::Join": [ "", [ "10.", { "Ref": "VPCClassBOctet" }, ".0.0/24" ] ] },
                "MapPublicIpOnLaunch": true,
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ],
                "VpcId": { "Ref" : "VPC" }
            }
        },
        "PrivateSubnet":
        {
            "Type": "AWS::EC2::Subnet",
            "Properties":
            {
                "AvailabilityZone": {"Ref" : "VPCAZ" },
                "CidrBlock": { "Fn::Join": [ "", [ "10.", { "Ref": "VPCClassBOctet" }, ".1.0/24" ] ] },
                "MapPublicIpOnLaunch": false,
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ],
                "VpcId": { "Ref" : "VPC" }
            }
        },

        "GatewayToInternet":
        {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties":
            {
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
            }
        },
        "NATInstance":
        {
            "Type": "AWS::EC2::Instance",
            "Properties": 
            {
                "AvailabilityZone" : {"Ref" : "VPCAZ" },
                "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMIs", {"Ref" : "AWS::Region"}, "AMI"]},
                "InstanceType" : "t2.micro",
                "SecurityGroupIds" : [{"Ref" : "InstancesToNATSecurityGroup"}],
                "SourceDestCheck" : false,
                "SubnetId" : {"Ref" : "PublicSubnet"},
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
            },
            "DependsOn" : ["GatewayAttachmentToVPC"]

        },
        "RoutesForPublicSubnet":
        {
            "Type": "AWS::EC2::RouteTable",
            "Properties":
            {
                "VpcId" : {"Ref" : "VPC"},
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
            }
        },
        "RoutesForPrivateSubnet":
        {
            "Type": "AWS::EC2::RouteTable",
            "Properties":
            {
                "VpcId" : {"Ref" : "VPC"},
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
            }
        },
        "GenericNACL":
        {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties" :
            {
                "VpcId" : {"Ref" : "VPC"},
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
            }
        },
        "GatewayAttachmentToVPC":
        {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" :
            {
                "InternetGatewayId" : {"Ref" : "GatewayToInternet"},
                "VpcId" : {"Ref" : "VPC"}
                
            }
        },

        "RouteToGateway":
        {
            "Type" : "AWS::EC2::Route",
            "Properties":
            {
                "RouteTableId": { "Ref" : "RoutesForPublicSubnet"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId" : {"Ref" : "GatewayToInternet"}
                
            }
            
        },
        "RouteToNat":
        {
            "Type" : "AWS::EC2::Route",
            "Properties":
            {
                "RouteTableId": { "Ref" : "RoutesForPrivateSubnet"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId" : {"Ref" : "NATInstance"}
            }
        },
        "NACLInboundEntry":
        {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties":
            {
                "CidrBlock" : "0.0.0.0/0",
                "NetworkAclId" : {"Ref" : "GenericNACL" },
                "PortRange" : {"From":0, "To":65535},
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 100,
                "Egress": false
                
            }
        },
        "NACLOutboundEntry":
        {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties":
            {
                "CidrBlock" : "0.0.0.0/0",
                "NetworkAclId" : {"Ref" : "GenericNACL" },
                "PortRange" : {"From":0, "To":65535},
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 100,
                "Egress": true
            
            }
        },
        "NACLBindingForPublicSubnet":
        {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : 
            {
                "NetworkAclId" : {"Ref" : "GenericNACL"},
                "SubnetId" : {"Ref" : "PublicSubnet"}
            }
        },
        "NACLBindingForPrivateSubnet":
        {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : 
            {
                "NetworkAclId" : {"Ref" : "GenericNACL"},
                "SubnetId" : {"Ref" : "PrivateSubnet"}
            }
        },
        "RoutesBindingForPublicSubnet":
        {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : 
            {
                "RouteTableId" : {"Ref" : "RoutesForPublicSubnet"},
                "SubnetId" : {"Ref" : "PublicSubnet"}
            }
        },
                  
        "RoutesBindingForPrivateSubnet":
        {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : 
            {
                "RouteTableId" : {"Ref" : "RoutesForPrivateSubnet"},
                "SubnetId" : {"Ref" : "PrivateSubnet"}
            }
        },

        "LoadBalancer":
        {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" :
            {
                "Listeners" : [{
                    "InstancePort": "8888",
                    "InstanceProtocol":"HTTP",
                    "LoadBalancerPort": "80",
                    "Protocol":"HTTP"
                }],
                "Scheme" : "internet-facing",
                "SecurityGroups": [{"Ref" : "InternetToLBSecurityGroup"}],
                "Subnets": [{"Ref" : "PublicSubnet"}],
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
            }
        },
        "InstanceGorup":
        {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties":
            {
                "Cooldown": "60",
                "DesiredCapacity": {"Ref" : "NumberOfNodes"},
                "MaxSize": {"Ref" : "NumberOfNodes"},
                "MinSize": {"Ref" : "NumberOfNodes"},
                "HealthCheckGracePeriod": 30,
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {"Ref": "InstanceConfig"},
                "LoadBalancerNames": [{"Ref" : "LoadBalancer"}],
                "MetricsCollection": [{"Granularity" : "1Minute"}],
                "VPCZoneIdentifier": [{"Ref": "PrivateSubnet"}],
                "Tags": [ {"Key" : "PURPOSE", "PropagateAtLaunch" : true, "Value" : "LEARN_CLOUDFORMATION" } ]
            },
            "UpdatePolicy" :
            {
                "AutoScalingRollingUpdate":
                {
                    "MaxBatchSize": 1,
                    "MinInstancesInService": 1,
                    "PauseTime": "30",
                    "WaitOnResourceSignals": false
                }
            }
        },
        "InstanceConfig":
        {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": false,
                "IamInstanceProfile": {"Ref" : "DynamoAccessInstanceProfile" },
                "ImageId": {"Fn::FindInMap": ["AWSLinuxAMIs", {"Ref" : "AWS::Region"}, "AMI"]},
                "InstanceMonitoring": true,
                "InstanceType": {"Ref": "NodeSize"},
                "SecurityGroups": [ {"Ref" : "LBToInstanceSecurityGroup"} ],
                "UserData" : 
                {
                    "Fn::Base64":
                    {
                        "Fn::Join": [
                          "\n",
                          [
                            "#!/bin/bash",
                            { "Fn::Join": [ "", [ "echo 'Running number ", { "Ref": "RunNumber" }, "' > /tmp/runnum.log" ] ] },
                            "yum install --enablerepo=epel -y git nodejs npm",
                            "npm config set registry http://registry.npmjs.org/",
                            "npm install -g forever@0.14.1",
                            "git clone https://github.com/clouddaddy/dynamo-demo",
                            { "Fn::Join": [  "", [ "export AWS_REGION=", { "Ref": "AWS::Region" } ] ] },
                            "cd dynamo-demo",
                            { "Fn::Join": [ "", [ "forever start server.js --port 8888 --table ", { "Ref": "DynamoTableForTodos" } ] ] }
                          ]
                        ]
                      }
                }
                
            }
        },
        "DynamoTableForTodos":
        {
            "Type" : "AWS::DynamoDB::Table",
            "Properties": 
            {
                "AttributeDefinitions": [{ "AttributeName": "id", "AttributeType": "S" }],
                "KeySchema": [{ "AttributeName": "id", "KeyType": "HASH" }],
                "ProvisionedThroughput":
                { 
                    "ReadCapacityUnits": { "Ref": "TableThrougput"},
                    "WriteCapacityUnits": { "Ref": "TableThrougput"}
                },
                "Tags": [ {"Key" : "PURPOSE", "Value" : "LEARN_CLOUDFORMATION" } ]
            }
        },
        "DynamoAccesRole":
        {
            "Type": "AWS::IAM::Role",
            "Properties":
            {
                "AssumeRolePolicyDocument": { 
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect": "Allow",
                            "Principal": {"Service" : ["ec2.amazonaws.com"]},
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                 },
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
                ],
                "Path": "/"
            }
        },
        "DynamoAccessInstanceProfile":
        {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties":
            {
                "Path": "/",
                "Roles": [{"Ref" : "DynamoAccesRole"}]
            }
        },
        "LBToInstanceSecurityGroup":
        {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": 
            {
              "GroupDescription": "Load balancer to instances",
              "SecurityGroupIngress": [
                {
                  "FromPort": 8888,
                  "IpProtocol": "TCP",
                  "SourceSecurityGroupId": { "Ref": "InternetToLBSecurityGroup" },
                  "ToPort": 8888
                }
              ],
              "VpcId": { "Ref": "VPC" }
            }
        },
        "InternetToLBSecurityGroup":
        {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": 
            {
                "GroupDescription": "Internet to load balancer",
                "SecurityGroupIngress": [
                 {
                    "FromPort": 80,
                    "IpProtocol": "TCP",
                    "CidrIp": "0.0.0.0/0",
                    "ToPort": 80
                 }
                ],
            "VpcId": { "Ref": "VPC" }
            }
      },
      "InstancesToNATSecurityGroup": 
      {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": 
        {
          "GroupDescription": "Instances to NAT instance",
          "SecurityGroupIngress": [
            {
              "FromPort": 0,
              "IpProtocol": "-1",
              "SourceSecurityGroupId": { "Ref" : "LBToInstanceSecurityGroup" },
              "ToPort": 65535
            }
          ],
          "VpcId": { "Ref": "VPC" }
        }
      }
    
    },
    "Outputs": 
    {
        "ELBDNS": {
          "Description": "The DNS for the ELB / our app.",
          "Value": {
            "Fn::Join": [
              "",
              [
                "http://",
                { "Fn::GetAtt": ["LoadBalancer", "DNSName"] },
                "/index.html"
              ]
            ]
          }
        }
    }
}